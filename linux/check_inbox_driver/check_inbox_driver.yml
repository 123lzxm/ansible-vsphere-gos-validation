# Copyright 2021 VMware, Inc.
# SPDX-License-Identifier: BSD-2-Clause
---
# Description:
#   This test case is used for get inbox drivers' versions in Linux VM with
# open-vm-tools installed, and will write drivers version info into file
# 'inbox_driver_versions.txt' in the log path of current test run.
#
- name: check_inbox_driver
  hosts: localhost
  vars_files:
    - "{{ testing_vars_file | default('../../vars/test.yml') }}"
  vars:
    inbox_drivers: ["vmxnet3", "vmw_vmci", "vsock", "vmw_vsock_vmci_transport", "vmw_pvscsi", "vmw_balloon", "vmwgfx"]
  tasks:
    - name: Initialized versions dict
      set_fact:
        versions: {}

    - block:
        - include_tasks: ../utils/test_setup.yml
          vars:
            vmtools_check: "True"

        - name: Get OS kernel version
          set_fact:
            versions: "{{ versions | combine({'kernel': guest_os_ansible_kernel}) }}"

        - name: Get open-vm-tools version
          block:
            - include_tasks: ../utils/get_vmware_toolbox_cmd_path.yml

            - name: Check open-vm-tools version
              command: "{{ vmware_toolbox_cmd_path }} -v"
              register: ovt_version
              delegate_to: "{{ vm_guest_ip }}"

            - name: Set fact of open-vm-tools version
              set_fact:
                versions: "{{ versions | combine({'open-vm-tools': ovt_version.stdout}) }}"
          when: vmtools_is_ovt is defined and vmtools_is_ovt

        - name: Get drivers version in VMware Photon OS
          block:
            - name: "Check driver version"
              shell: "if [ -e /sys/module/{{ driver }}/version ]; then cat /sys/module/{{ driver }}/version ; fi"
              with_items: "{{ inbox_drivers }}"
              loop_control:
                loop_var: driver
              register: photon_drivers
              no_log: True
              delegate_to: "{{ vm_guest_ip }}"

            - name: Set fact of driver version dict
              set_fact:
                versions: "{{ versions | combine({driver.driver: driver.stdout}) }}"
              with_items: "{{ photon_drivers.results }}"
              loop_control:
                loop_var: driver
          when:
            - guest_os_ansible_distribution == "VMware Photon OS"

        - name: "Get drivers version in {{ guest_os_ansible_distribution }}"
          block:
            - name: "Check driver {{ driver }} version"
              shell: modinfo {{ driver }} | grep -i "^version:" | awk '{print $2}'
              with_items: "{{ inbox_drivers }}"
              loop_control:
                loop_var: driver
              register: inbox_drivers
              delegate_to: "{{ vm_guest_ip }}"

            - name: Set fact of driver version dict
              set_fact:
                versions: "{{ versions | combine({driver.driver: driver.stdout}) }}"
              with_items: "{{ inbox_drivers.results }}"
              loop_control:
                loop_var: driver
          when:
            - guest_os_ansible_system == "Linux"
            - guest_os_ansible_distribution != "VMware Photon OS"

        - name: Print kernel, open-vm-tools, and inbox drivers versions
          debug: var=versions

        # Write driver versions into file
        - name: "Print driver versions into {{ testcase_info_collect_path }}/inbox_driver_versions.txt"
          lineinfile:
            path: "{{ testcase_info_collect_path }}/inbox_driver_versions.txt"
            regexp: "^{{ driver }}"
            line: "{{ driver }}:{{ versions[driver] }}"
            create: True
            mode: '644'
          with_items: "{{ versions }}"
          loop_control:
            loop_var: driver

        - include_tasks: ../../common/print_test_result.yml
          vars:
            test_result: "Passed"

      rescue:
        - include_tasks: ../utils/test_rescue.yml
